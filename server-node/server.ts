/**
 * @file Entry points for the backend server.
 */

import path from 'path'

import { json as jsonParser } from 'body-parser'
import express from 'express'
import * as graphql from 'express-graphql'

import * as graph from './graph'
import { version } from './lib'
import serve_events from './serve_events'
import serve_subtitle from './serve_subtitle'
import serve_video from './serve_video'

/** Server listening port */
const PORT = 8086
const API_BASE = '/api'

const app = express()

app.use(jsonParser())
app.set('json spaces', 4)

// eslint-disable-next-line @typescript-eslint/no-misused-promises
app.use('/graphql', graphql.graphqlHTTP({ graphiql: true, schema: graph.SCHEMA, rootValue: graph.ROOT }))

// Serve the static files from the `app` subdirectory. This directory is
// generated by the build process and contains the compilation output for the
// web application.
//
// Note that this is not used during development, as we use the webpack server
// to provide those and proxy the backend through webpack.
const WEB = path.join(path.dirname(__filename), 'app')
app.use(express.static(WEB))

app.get('/api', (req, res) => {
	res.json({ app: 'Kotoba', version: version() })
})

serve_events(app, API_BASE)
serve_subtitle(app, API_BASE)
serve_video(app, API_BASE)

/** Handle any unmatched request as the index (we need this for routes to work) */
app.get('*', (req, res) => {
	res.sendFile(path.join(WEB, 'index.html'))
})

/** Entry point to spin-up the server. */
export function start_server() {
	app.listen(PORT, () => {
		console.log(`Server listening on http://localhost:${PORT}/`)
	})
}
