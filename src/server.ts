/**
 * @file Entry points for the backend server.
 */

import path from 'path'

import { json as jsonParser } from 'body-parser'
import express from 'express'
import { v4 as uuid } from 'uuid'

import { version } from './lib'
import { register_video_api } from './video'

/** Server listening port */
const PORT = 8086
const API_BASE = '/api'

const app = express()

app.use(jsonParser())
app.set('json spaces', 4)

// Serve the static files from the `app` subdirectory. This directory is
// generated by the build process and contains the compilation output for the
// web application.
//
// Note that this is not used during development, as we use the webpack server
// to provide those and proxy the backend through webpack.
const WEB = path.join(path.dirname(__filename), 'app')
app.use(express.static(WEB))

app.get('/api', (req, res) => {
	res.json({ app: 'Kotoba', version: version() })
})

const clients = new Map<string, (data: string) => void>()

export function postEvent(data: unknown) {
	const event = typeof data != 'string' ? JSON.stringify(data) : data
	for (const post of clients.values()) {
		post(event)
	}
}

app.get('/api/events', (req, res) => {
	const id = uuid()
	const headers = {
		'Content-Type': 'text/event-stream',
		Connection: 'keep-alive',
		'Cache-control': 'no-cache',
	}

	res.writeHead(200, headers)

	const post = (data: string) => {
		res.write(`data: ${data}\n\n`)
	}

	clients.set(id, post)

	req.on('close', () => {
		clients.delete(id)
	})

	post(JSON.stringify({ id }))
})

register_video_api(app, API_BASE)

/** Handle any unmatched request as the index (we need this for routes to work) */
app.get('*', (req, res) => {
	res.sendFile(path.join(WEB, 'index.html'))
})

/** Entry point to spin-up the server. */
export function start_server() {
	app.listen(PORT, () => {
		console.log(`Server listening on http://localhost:${PORT}/`)
	})
}
